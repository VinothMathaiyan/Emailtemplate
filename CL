import json
import pandas as pd
import re  # Import re for removing HTML tags and special HTML entities

def clean_html_tags(text):
    """Removes HTML tags and cleans common HTML entities from a string."""
    if text:
        # Remove all HTML tags like <div>, <b>, <img>, etc.
        text = re.sub(r'<.*?>', '', text)
        # Replace HTML entities like &nbsp; and &amp; with their corresponding characters
        text = re.sub(r'&nbsp;', ' ', text)
        text = re.sub(r'&amp;', '&', text)
        # Remove extra whitespace caused by removing tags
        text = re.sub(r'\s+', ' ', text).strip()
    return text

def map_question_type(question_type):
    """Maps question type to one of the specified types or returns the original if not found."""
    mapping = {
        "Intro": "Intro",
        "Single": "Single",
        "Multi": "Multi",
        "Ranking": "Ranking",
        "Free Text": "Free Text"
    }
    # Return the mapped type if found, else return the original question_type
    return mapping.get(question_type, question_type)

def qsf_to_excel(qsf_path, excel_path):
    """
    Converts a QSF file to an Excel file.
    
    :param qsf_path: Path to the input QSF file.
    :param excel_path: Path to save the output Excel file.
    """
    # Load the QSF file
    with open(qsf_path, 'r', encoding='utf-8') as file:
        qsf_data = json.load(file)

    # Extract relevant survey questions from SurveyElements
    survey_elements = qsf_data.get("SurveyElements", [])
    
    # List to store extracted question data
    questions_data = []

    for element in survey_elements:
        if element.get("Element") == "SQ":  # SQ = Survey Question
            payload = element.get("Payload", {})
            
            question_id = payload.get("QuestionID", "N/A")
            question_text = clean_html_tags(payload.get("QuestionText", "N/A"))  # Clean HTML tags and &nbsp;
            question_type = map_question_type(payload.get("QuestionType", "N/A"))
            data_export_tag = payload.get("DataExportTag", "N/A")  # Extract DataExportTag
            
            # Safely extract choices if they exist and are in a valid format
            choices = payload.get("Choices", {})
            if isinstance(choices, dict):  # Ensure 'Choices' is a dictionary
                response_options = [clean_html_tags(choice.get("Display", "N/A")) for choice in choices.values()]
            else:
                response_options = []

            # Add question info to the list
            questions_data.append({
                'Question ID': question_id,
                'Question Text': question_text,
                'Question Type': question_type,
                'Response Options': '; '.join(response_options) if response_options else None,  # Replace comma with semicolon
                'DataExportTag': data_export_tag  # Include DataExportTag
            })

    # Convert the list of dictionaries to a DataFrame
    df = pd.DataFrame(questions_data)
    
    # Export the DataFrame to an Excel file
    df.to_excel(excel_path, index=False)
    print(f"Excel file has been saved at {excel_path}")


# Run the function to convert a QSF file to an Excel file
qsf_path = 'path/to/your/input.qsf'  # Replace with the path to your QSF file
excel_path = 'path/to/your/output.xlsx'  # Replace with the desired output path
qsf_to_excel(qsf_path, excel_path)
