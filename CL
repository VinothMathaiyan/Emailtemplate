import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np

# Sample DataFrame: Replace with your actual data
data = {
    'Topics': ['Topic1', 'Topic1', 'Topic2', 'Topic2', 'Topic1'],
    'Actor': ['Actor1', 'Actor1', 'Actor2', 'Actor2', 'Actor1'],
    'cleaned_responses1': [
        'I love coding in Python.',
        'Python is great for data analysis.',
        'I enjoy machine learning and AI.',
        'Data science is an exciting field.',
        'Machine learning models are fascinating.'
    ]
}

df = pd.DataFrame(data)

# Function to perform clustering on responses and return the optimal number of clusters and top words
def optimal_clusters(responses, max_k=10):
    if len(responses) < 2:
        return [0] * len(responses), 1, -1, {}  # Handle case with fewer than 2 samples
    
    vectorizer = TfidfVectorizer(stop_words='english')
    X = vectorizer.fit_transform(responses)
    
    best_k = 2
    best_score = -1
    
    for k in range(2, min(max_k + 1, len(responses))):
        model = KMeans(n_clusters=k, n_init=10, random_state=42)
        labels = model.fit_predict(X)
        score = silhouette_score(X, labels)
        
        if score > best_score:
            best_k = k
            best_score = score
    
    model = KMeans(n_clusters=best_k, n_init=10, random_state=42)
    labels = model.fit_predict(X)
    
    # Get top words for each cluster
    top_words = {}
    order_centroids = model.cluster_centers_.argsort()[:, ::-1]
    terms = vectorizer.get_feature_names_out()
    
    for i in range(best_k):
        top_words[i] = [terms[ind] for ind in order_centroids[i, :10]]
    
    return labels, best_k, best_score, top_words

# Step 1: Group by Topics and Actor, and then apply clustering within each group
result = []

for (topic, actor), group in df.groupby(['Topics', 'Actor']):
    group = group.reset_index(drop=True)
    labels, best_k, best_score, top_words = optimal_clusters(group['cleaned_responses1'].tolist())
    group['Cluster'] = labels
    group['Optimal_Clusters'] = best_k
    group['Silhouette_Score'] = best_score
    group['Top_Words'] = [top_words[cluster] for cluster in labels]
    result.append(group)

# Step 2: Concatenate results into a single DataFrame
df_final = pd.concat(result).reset_index(drop=True)

# Display DataFrame with columns: Topics, Actor, cleaned_responses1, Cluster, Optimal_Clusters, Silhouette_Score, Top_Words
print(df_final[['Topics', 'Actor', 'cleaned_responses1', 'Cluster', 'Optimal_Clusters', 'Silhouette_Score', 'Top_Words']])
