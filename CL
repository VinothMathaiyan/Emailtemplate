
import pandas as pd
import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Get the file name from user input
file_path = input("Enter the Excel file name (including .xlsx): ")

# Load the Excel file
xls = pd.ExcelFile(file_path)

# Read free-text responses
df_1234 = pd.read_excel(xls, sheet_name="1234")
df_5678 = pd.read_excel(xls, sheet_name="5678")

# Read topics/moments
df_stages = pd.read_excel(xls, sheet_name="Stages")

# Read stopwords
stopwords_list = pd.read_excel(xls, sheet_name="stopwords").iloc[:, 0].tolist()

# Define the dictionary for keyword expansion
synonyms_dict = {
    "leave": ["vacation", "holiday", "PTO"],
    "booking": ["scheduling", "reservation"],
    "interface": ["system", "platform", "tool"],
    "Workday": ["HR system", "portal"]
}

def expand_text(text, synonyms_dict):
    """Replace words in text with their synonyms from the dictionary."""
    words = text.split()
    expanded_words = []
    
    for word in words:
        word_lower = word.lower()
        for key, synonyms in synonyms_dict.items():
            if word_lower in synonyms or word_lower == key:
                word = key
                break
        expanded_words.append(word)
    
    return " ".join(expanded_words)

# Preprocess text (Expand & Vectorize)
vectorizer = TfidfVectorizer(stop_words=stopwords_list)

# Expand topics first
df_stages["Expanded_Topics"] = df_stages["Topics"].astype(str).apply(lambda x: expand_text(x, synonyms_dict))
stages_tfidf = vectorizer.fit_transform(df_stages["Expanded_Topics"])

def map_topics(df):
    """Maps relevant stages to each response based on cosine similarity."""
    df["Stages"] = ""
    
    # Expand responses before vectorizing
    df["Expanded_Response"] = df["Response"].astype(str).apply(lambda x: expand_text(x, synonyms_dict))
    
    responses_tfidf = vectorizer.transform(df["Expanded_Response"])
    similarity_matrix = cosine_similarity(responses_tfidf, stages_tfidf)

    for i, similarities in enumerate(similarity_matrix):
        best_matches = [df_stages["Topics"].iloc[j] for j in range(len(similarities)) if similarities[j] > 0.1]
        df.at[i, "Stages"] = "; ".join(best_matches) if best_matches else "No Match"

# Apply mapping
map_topics(df_1234)
map_topics(df_5678)

# Save results
with pd.ExcelWriter(file_path, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
    df_1234.to_excel(writer, sheet_name="1234", index=False)
    df_5678.to_excel(writer, sheet_name="5678", index=False)

print(f"Mapping completed and saved to '{file_path}'.")
