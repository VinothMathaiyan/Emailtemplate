import pandas as pd
import os
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment

# Set working directory
os.chdir(r'path')  # Update with the actual path

# List of Excel files to combine
excel_files = ["file1.xlsx", "file2.xlsx", "file3.xlsx"]  # Update with your actual file names

# Output file name
output_file = "combined_file.xlsx"
master_sheet = "Master"  # Define the sheet name

# Read and combine all files
all_data = []

for file in excel_files:
    if os.path.exists(file):  # Check if the file exists
        df = pd.read_excel(file)
        file_name_without_extension = os.path.splitext(file)[0]  # Remove the file extension (.xlsx)
        df["File Name"] = file_name_without_extension  # Add file name without extension
        df["Date Updated"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # Add timestamp
        all_data.append(df)

# Combine all DataFrames into one
final_df = pd.concat(all_data, ignore_index=True)

# Check if the output file already exists
if os.path.exists(output_file):
    with pd.ExcelFile(output_file) as existing_xl:
        if master_sheet in existing_xl.sheet_names:
            existing_df = pd.read_excel(output_file, sheet_name=master_sheet)  # Read only the Master sheet
            final_df = pd.concat([existing_df, final_df], ignore_index=True)  # Append new data

# Load existing workbook to preserve other sheets
wb = load_workbook(output_file) if os.path.exists(output_file) else load_workbook()

# Write the updated data to the Master sheet
if master_sheet in wb.sheetnames:
    wb.remove(wb[master_sheet])  # Remove the existing Master sheet
ws = wb.create_sheet(master_sheet)

# Apply header background color
header_fill = PatternFill(start_color='D9D9D9', end_color='D9D9D9', fill_type='solid')

for col_num, column_title in enumerate(final_df.columns, 1):
    cell = ws.cell(row=1, column=col_num, value=column_title)
    cell.fill = header_fill
    cell.alignment = Alignment(wrap_text=True)

# Write data and apply text wrapping
for r_idx, row in enumerate(final_df.itertuples(index=False), 2):
    for c_idx, value in enumerate(row, 1):
        cell = ws.cell(row=r_idx, column=c_idx, value=value)
        cell.alignment = Alignment(wrap_text=True)

# Adjust specific column widths
ws.column_dimensions['A'].width = 20
ws.column_dimensions['B'].width = 20
ws.column_dimensions['C'].width = 20
ws.column_dimensions['D'].width = 20
ws.column_dimensions['E'].width = 20

# Save the file
wb.save(output_file)

print(f"Successfully combined and adjusted column widths in '{output_file}' (Sheet: '{master_sheet}'), while preserving other sheets.")
